/*
 * Copyright 2018 Jonathan West
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
*/

package com.slice.indexer.generation;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import com.slice.indexer.shared.util.BaseConversionUtil;
import com.slice.indexer.shared.util.SearchIndexerUtil;

/**
 * This class takes a path token map generated by FSDatabasePathCompressorPrefetch (where the tokens with the lowest
 * ids are the ones that would benefit most from compressio) and uses that to compress path string paths to 
 * the compress(...) method.
 *  
 *  Used by FSDatabase. Not thread safe.
 * */
public class FSDatabasePathCompressor {

	Map<Long /* prefetch map id*/, String /* string token*/> _databasePathDecompressor = new HashMap<Long, String>(100, 0.95f);
	
	Map<String /* path token*/, Long /* prefetch map id */> _prefetchMap = new HashMap<String, Long>();
	
	public FSDatabasePathCompressor(Map<String /* path token */, Long /* path id*/> prefetchMap) {
		_prefetchMap = prefetchMap;
	}

	/** Compress a given path into base-62 representations of the ids (from prefetch map) representing the individual 
	 * directories and files. */
	public String compress(String path) {
		String[] components;
		if(SearchIndexerUtil.isWindows()) {
			components = path.split("\\\\");
		} else {
			components = path.split(File.separator);
		}

		
		StringBuilder sb = new StringBuilder();
		
		for(String c : components) {
			
			Long id = _prefetchMap.get(c);
			if(id == null) {
				System.err.println("Error: prefetch map is missing values, somehow.");
				return null;
			}
			_databasePathDecompressor.put(id,  c);
			
			sb.append(BaseConversionUtil.convertToBase(id, 62));
			
			
			sb.append(File.separator);
		}
		
		String result = sb.toString();
		
		result = result.substring(0, result.length()-1); // Strip trailing file separator
		
		return result;
		
	}
	
	public Map<Long, String> getGeneratedDatabasePathDecompressor() {
		return _databasePathDecompressor;
	}
	
}
